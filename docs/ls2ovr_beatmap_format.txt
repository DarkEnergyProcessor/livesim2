Live Simulator: 2 "Over the Rainbow" beatmap specification
Version 0.5
Preferred file extension: .ls2ovr .ls3

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!                 Subject to change                !!
!! Notice will be removed once the format is frozen !!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Live Simulator: 2 "Over the Rainbow" or referred as "ls2ovr" is new beatmap
format aimed to overcome some limitation in older Live Simulator: 2 binary
beatmap. The new beatmap format is composed mainly using Named Binary Tag format
version 19133 as described in official Minecraft wiki
(https://minecraft.gamepedia.com/NBT_format) with these notes:
* Field name is always in "lowerCamelCase", unless the first letter
  is required to be in uppercase.
* TAG_Long (and TAG_Long_Array) are never used due to limitation
  in Lua 5.1 when parsing 64-bit integers.
* NBT data is mainly stored uncompressed unless noted.
* It never uses empty root tag like Minecraft mostly do
* TAG_Compound data can be any order.
* String in TAG_String is stored using modified UTF-8 where null byte
  is encoded as "\xC0\x80" instead of "\x00".
* NBT data structure is specified as output of PyNBT's `debug-nbt`
  tool (example output can be found here https://wiki.vg/NBT).

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT",
"RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in
RFC 2119. (https://tools.ietf.org/html/rfc2119)

Datatypes (unsigned is not supported). All byte order are in big endian:
    qword - 8 bytes - TAG_Long
    dword - 4 bytes - TAG_Int
    word  - 2 bytes - TAG_Short
    byte  - 1 byte  - TAG_Byte

The usage of TAG_* means it's NBT tagged. Usage of qword, dword, word, and byte
are primitive types and doesn't use any NBT parsing.

File information start: Sections are parsed in order

Header: File header
    qword - String with sequence "livesim3", this render it unreadable by older LS2 parser
    dword - Format version (-2147483648 as of writing and increment)
    dword - String with sequence "\x1A\x0A\x0D\x0A"

Metadata: Beatmap metadata
    dword - NBT total size in bytes
    TAG_Compound("metadata"): Beatmap metadata
    {
        TAG_String("title"): Song name (REQUIRED)
        TAG_String("artist"): Song artist (OPTIONAL)
        TAG_String("source"): Song source either anime name, album name, etc. (OPTIONAL)
        TAG_List("composers"): List of composers in TAG_Compound (OPTIONAL).
        {
            - For every composers:
            TAG_Compound(None):
            {
                TAG_String("role"): Composer role (REQUIRED)
                TAG_String("name"): Composer name (REQUIRED)
            }
        }
        TAG_String("audio"): Audio file name (OPTIONAL)
        TAG_String("artwork"): Song artwork file name (OPTIONAL)
        TAG_List("tags"): List of TAG_Strings of tags (OPTIONAL). If no tags are present
                          this field is RECOMMENDED to be absent instead.
    }
    byte[16] - Raw MD5 hash of the NBT data above

Beatmap: Beatmap data header
    byte - Beatmap NBT data compression type. Allowed values are:
           - 0 = Uncompressed.
           - 1 = GZip
           - 2 = zLib
           - 3 = LZ4
           - 4 = Zstandard
           - 5 = Brotli
    dword - Beatmap NBT data compressed size
    dword - Beatmap NBT data uncompressed size

Beatmap: Beatmap data, may be compressed
    byte - Amount of beatmap
    - For every "Amount of beatmap"
    {
        dword - NBT data size
        TAG_Compound("beatmap"): Beatmap data
        {
            TAG_Byte("star"): Beatmap star difficulty level (REQUIRED)
            TAG_Byte("starRandom"): Beatmap star difficulty when beatmap randomized (REQUIRED).
                                    MAY have same value as "star" field above.
            TAG_String("difficultyName"): Beatmap difficulty name (OPTIONAL)
            TAG_String("background"): Beatmap background file name (OPTIONAL)
                                      - String starting with ":" followed by number denotes
                                        predefined background number
                                      - Otherwise, it's treated as file name and the image
                                        will be looked up in data section.
            TAG_String("backgroundRandom"): Beatmap background file name when beatmap randomized
                                            with specification same as above. MAY have same value
                                            as "background" field above.
                                            (REQUIRED if "background" also exist)
            TAG_Compound("backgroundList"): Beatmap background list (OPTIONAL)
            {
                TAG_String("main"): Main background filename (REQUIRED)
                - For "left" and "right" field below, both must exist or not at all.
                - If only one of it exist, then it must be discarded.
                TAG_String("left"): Left background filename (OPTIONAL)
                TAG_String("right"): Right background filename (OPTIONAL)
                - For "top" and "bottom" field below, both must exist or not at all.
                - If only one of it exist, then it must be discarded.
                TAG_String("top"): Top background filename (OPTIONAL)
                TAG_String("buttom"): Bottom background filename (OPTIONAL)
            }
            TAG_Compound("randomBackgroundList"): Beatmap background list for random (OPTIONAL)
            TAG_List("customUnitList"): Custom unit image list (OPTIONAL)
            {
                - For every element
                TAG_Compound(None): Custom unit definition
                {
                    TAG_BYTE("position"): Unit position where 1 is rightmost and 9 is leftmost (REQUIRED)
                    TAG_String("filename"): Custom unit image filename
                }
            }
            TAG_Int_Array("scoreInfo"): 4 ints of score level, in C, B, A, and S score order (OPTIONAL)
            TAG_Int_Array("comboInfo"): 4 ints of combo level, in C, B, A, and S combo order (OPTIONAL)
            TAG_Int("baseScorePerTap"): Base score/tap (OPTIONAL)
            TAG_Short("stamina"): Initial and max stamina (OPTIONAL)
            TAG_Byte("simultaneousMarked"): Is simultaneous note marked correctly (0/1)? (REQUIRED)
            TAG_List("map"): Beatmap hit points data (REQUIRED)
            {
                - For every map
                TAG_Compound(None)
                {
                    TAG_Double("time"): Note timing in seconds (REQUIED)
                    TAG_Int("attribute"): Note attribute (REQUIRED)
                                          Bit pattern: 0rrrrrrr rrgggggg gggbbbbb bbbbcccc
                                          If "c" bits is 15, then it's custom colored note:
                                        - bit 22-30 - R color (9 bits, unsigned representation)
                                        - bit 13-21 - G color (9 bits, unsigned representation)
                                        - bit 4-12  - B color (9 bits, unsigned representation)
                                          Otherwise, "c" determines the predefined note color.
                    TAG_Byte("position"): Note lane position, valid values range are 1..9 (REQUIRED)
                    TAG_Byte("flags"): Note flags (REQUIRED). Bit pattern: 0000wstt
                                       - "t" value:
                                         - 0 = Normal
                                         - 1 = Token note
                                         - 2 = Star note
                                         - 3 = Long note
                                       - "s" flag: Swing note?
                                       - "w" flag: Simultaneous note?
                    TAG_Int("noteGroup"): Swing note group (REQUIRED if "s" flag is set, absent otherwise)
                    TAG_Double("length"): Long note duration (REQUIRED if "t" = 3, absent otherwise)
                }
            }
            TAG_Compound("editorData"): Beatmap editor-related information (OPTIONAL)
            {
                TAG_String("software"): Beatmap editing software (REQUIRED)
                TAG_Compound("data"): Additional beatmap editor-related data (OPTIONAL)
            }
        }
        byte[16] - Raw MD5 hash of NBT data above
    }

Data: Additional beatmap data such as audio and images goes here
    dword - Additional beatmap data NBT size (can be 0)
    TAG_List("additionalData"): Beatmap additional data
    {
        - For every additional data
        TAG_Compound(None): Additional data information
        {
            TAG_String("filename"): Data file name (REQUIRED)
            TAG_Int("offset"): Data file position inside the beatmap file relative to beginning
                               if the file, 16-byte aligned (REQUIRED)
            TAG_Int("size"): Data file size (REQUIRED)
        }
    }

Implementation notes:
There are some notes for people who want to implement this beatmap format. Note that the usage
of "parser" and "implementation" in here are identical.

A. Decoder
1. NBT parser
   a. MUST comply with version 19133 of NBT as described in the beginning of this document.
   b. MUST properly translate "\xCO\x80" to "\x00" for TAG_String.
   c. MUST expect either TAG_Compound or TAG_List as root tag. If the NBT library used can't satisfy
      this, parser is allowed to workaround the problem in the NBT library.
   d. MUST properly handle empty TAG_List.

2. File format parser
   a. MUST check for header at the beginning of the file as specified in "Header" above, and
      parser must reject the file if the header doesn't match.
   b. MUST detect transmission system that doesn't support 8-bit data by checking bit 31
      in "Format version" number and reject parsing in that case.
   c. MUST be able to detect unexpected end-of-line conversion by using the "Header" data
      above. If unexpected end-of-line is detected:
      1) Parser can do proper end-of-line conversion back to retain the original data
         intact and keep parsing.
      2) Parser can reject the file and show error to user.
   d. MUST correctly read big endian integers regardless of the host/device/system endianess.
   e. MUST NOT assume the order of TAG_Compound. The order of elements in TAG_Compound is undefined.
   f. MUST read TAG_List in order they are defined.
   g. MUST expect any "OPTIONAL" field above is absent, but parser is RECOMMENDED to handle the case
      such field exist. If the field is "OPTIONAL" and it contain unmeaningful value, parser MAY treat
      the field as omitted.
   h. MUST reject parsing if any field that are marked as "REQUIRED" is missing.
   i. MAY support non-seeking access, where access must be done serially.

3. Metadata assumption
   a. MAY use fallback names for "audio" field if it's absent, which is left to implementation.
   b. MUST NOT assume "tags" field to have values in it even if the TAG_List exist.
   c. MUST verify the authenticity of the whole NBT data using MD5 algorithm by
      hashing the whole NBT data and reject parsing if the MD5 hash doesn't match.

4. Beatmap data header
   a. MUST support at least these compression modes:
      1) Uncompressed (value 0)
      2) GZip (value 1)
      3) zLib (value 2)
      For "Uncompressed", the "Beatmap NBT data compressed size" and the
      "Beatmap NBT data compressed size" MUST be equal. Otherwise, parser
      MUST reject the file.
   b. MAY support other compression modes/formats, such as LZ4, Zstandard, and Brotli.
   c. MUST reject parsing if the compression format is unsupported.

5. Each beatmap data
   a. MUST use fallback difficulty name if "difficultyName" is absent. It's RECOMMENDED to
      use UTF-8 string "<star>\xE2\x98\x86" as fallback.
   b. MAY reject custom unit parsing for current problematic data or as whole if "position"
      field is outside of defined range.
   c. MUST reject the "scoreInfo" and "comboInfo" data if the elements is less than 4 or if
      one of the value is 0 or negative.
   d. MUST prioritize the usage of "backgroundList" (and "backgroundRandom") if such element
      exist. If in any case there's problem loading the "backgroundList", either because
      missing "main" field (but not left/right or top/bottom field), then parser MUST
      fallback to "background" field.
   e. MUST ignore additional elements in "scoreInfo" and "comboInfo" if the elements is more
      than 4
   f. MUST ignore particular problematic note and OPTIONALly writes to log. Problematic note
      are notes that have one of these conditions:
      1) Missing 1 or more required fields
      2) The "time" field is negative, +/-infinity, or NaN.
      3) Having "position" field outside of the range.
      4) Missing "noteGroup" field but "s" bit in "flags" is set.
      5) The "noteGroup" field is 0 or less.
      6) Missing "length" field but "t" value in "flags" is 3.
      7) The "length" field is negative, +/-infinity, or NaN.
   g. MAY use "w" flag to mark note as simultaneous only if "simultaneousMarked" is set to 1.
      Otherwise, implementation MUST identify simultaneous note by enumerating list of notes.
   h. MUST verify the authenticity of the beatmap NBT data using MD5 algorithm by hashing the
      whole NBT data and reject the current beatmap data if the MD5 hash doesn't match.

6. Additional data
   a. MUST assume the data is 16-byte aligned. Parser should ignore specific file if it's not
      aligned in 16-byte boundary.
   b. MAY load specific files in the beatmap for application purpose.
   c. MUST at least accept file with size of 1MB.
   d. STRONGLY RECOMMENDED to be able to handle big files.

B. Encoder
1. NBT parser
   a. MUST comply with version 19133 of NBT as described in the beginning of this document.
   b. MUST properly translate "\x00" to "\xCO\x80" for TAG_String.
   c. MUST allow creation of root tag with type TAG_Compound or TAG_List. If the NBT library used
      can't satisfy this, parser is allowed to workaround the problem in the NBT library.
   d. MUST properly handle empty TAG_List.

2. File format encoding
   a. MUST provide values that are marked as "REQUIRED"
   b. MUST encode values using the defined datatype/NBT tag.
   c. MAY provide values that are marked as "OPTIONAL", however subpoint "b" above still apply.
   d. STRONGLY RECOMMENDED to omit field that are marked as "OPTIONAL" if no value can be provided.

3. Beatmap encoding
   a. MUST support writing uncompressed, gzip, and zLib compressed beatmap data.

Changelog:
v0.5: 15-04-2019
- Removed unnecessary TAG_List in beatmap data.
- Simplify beatmap editor-related data.

v0.4: 14-04-2019
- Added "baseScorePerTap" in beatmap data.
- Added "backgroundList" and "randomBackgroundList" in beatmap data.
- Added "stamina" in beatmap data.

v0.3: 12-04-2019
- Added "scoreInfo" and "comboInfo" in beatmap data.
- Added "size" for each additional data.
- Changed implementation requirements for "difficultyName".

v0.2: 09-04-2019
- Added "simultaneousMarked" in beatmap data.
- Added encoding implementation notes.

v0.1: 06-04-2019
- Initial draft release.
